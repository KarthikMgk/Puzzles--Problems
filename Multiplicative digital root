QN: If all digits of a number n are multiplied by each other repeating with the product, the one
digit number obtained at last is called the multiplicative digital root of n. The number of
times digits need to be multiplied to reach one digit is called the multiplicative
persistance of n.
Example: 86 -> 48 -> 32 -> 6 (MDR 6, MPersistence 3)
341 -> 12->2 (MDR 2, MPersistence 2)
Using the function prodDigits() of previous exercise write functions MDR() and
MPersistence() that input a number and return its multiplicative digital root and
multiplicative persistence respectively


def MDR(num):
    while len(str(num)) < 2:
        endnum = proddigits(num)
        num = endnum
        return endnum
    print('found the single mdr value')
    print(endnum)
    
def mdr(x):
    count = 0
    while len(str(x))!=1:
        count+=1
        new = proddigits(x)
        x = new
    return new, count
